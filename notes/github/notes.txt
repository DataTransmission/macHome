CREATE NEW REPO (remote on github.com)
---------------
# create a new git repository in the <directory>
$ git init <directory>

# configure the <directory> (or go to the <directory>/.git/config to add configuration)
$ git config --global user.name gchen
$ git config --global user.email gchen@rsmas.miami.edu
# for example check '/projects/rsmas/kirtman/gchen/SAM/SAM_LES_80mx80mx80mx1s_M2005/.gitconfig'

# add vim as the editor when using git commit
$ git config --global core.editor 'vim'

# now add <file> to track
$ git add <file>

# now commit tracked files by skipping the message with flag -a
$ git commit -a 

# set shortcut for 'origin' (the remote origin)
$ git remote set-url origin https://github.com/ginochen/SAM.git

# List the remote connections you have to other repositories
$ git remote -v

# push to the remote repo
$ git push -u origin master

# if this ERROR pops up, two solutions
# error: The requested URL returned error: 403 Forbidden while accessing http://github.com/ginochen/SAM.git/info/refs
# fatal: HTTP request failed
# Solution 1 (this works for pegasus2 scratch dir)
# give the remote repo a SSH-KEY, follow the steps
$ ls -al ~/.ssh
# if 'id_rsa.pub' shows up, then vi to copy the key chain and add it to https://github.com/settings/ssh, otherwise generate a new SSH key
$ ssh-keygen -t rsa -b 4096 -C "gchen@rsmas.miami.edu"
# use the email as a label, and press enter, and enter a passphrase and this will pop up
> Your public key has been saved in /Users/you/.ssh/id_rsa.pub.
# then copy the key chain and add to https://github.com/settings/ssh
# Solution 2 (this works for pegasus2 $HOME dir)
# change 'url=https://github.com/ginochen/repo.git' to 'url=https://ginochen@github.com/ginochen/repo.git'

CREATE NEW REPO (remote on pegasus2)
---------------
# cd to /nethome/gchen/macHome, and set up a bare remote repo on pegasus2, let's say we want to track macHome folder
$ git init --bare macHome.git

# go back to my local macHome folder and start pushing stuff onto pegasus2
$ git push ssh://gchen@pegasus2.ccs.miami.edu:/nethome/gchen/macHome.git master


REMOVE REPO
-----------
# just delete the .git/ folder in the master path

REMOVE ADDED <file>
------------------
$ git rm --cached <file>
# only rm the staged <file>
$ git rm -f <file> 
# used when staging and permanently deleting the <file> at the same time

UNDO COMMITTED STATUS 
---------------------
# reset all staged files
git reset 
# reset specific <file>
git reset <file>

REMOVE REMOTE REPO (on github.com)
----------------------------------
# click the repo -> "Settings" -> "Delete this repository"

SHORTNAME (origin) FOR REMOTE REPO
----------------------------------
# cd to local master dir and use "original" as a shortname for the remote git path "https://github.com/ginochen/gino.git" 
$ git remote add origin https://github.com/ginochen/gino.git
$ vim ~/.git/config # check if the shortname is added to the local repo

RETURN VERSION
--------------
# back to older version
$ git log #print out versionNumber
$ git checkout versionNumber

CLONE REPO
----------
# clone a "forked" gitRepoDir to local localRepoDir (fork happens when you go to that person's 
# repo and click on the fork repo, it does not allow you to push to their repo unless you are a contributer.
# So everything that are pushed are to your own remote repo)
$ git clone gitRepoDir localRepoDir

CREATE/REMOVE/ENTER A BRANCH
----------------------
# notice that attaching to a branch will automatically change all the files tracked under that branch
# creat a branch
$ git checkout -b <branch name>
# remove a branch
$ git branch -d <branch name>
# enter a branch
$ git checkout master

COPY A REPO TO ANOTHER COMPUTER, UPDATE, and PUSH
-------------------------------------------------
# checking out ginochen/machome.git to current directory .
$ git init .
$ git remote add -t \* -f origin https://github.com/ginochen/macHome.git
$ git checkout master
#
# update the remote repo, make sure the url in .git/config is
# https://github.com/ginochen/macHome.git
$ git pull 
# push to the remote repo
$ git push origin master

CHECK TRACKED FILES
-------------------
# check tracked files under master branch
$ git ls-tree -r master

IGNORE FILES IN A FOLDER
------------------------
# add a folder without tracking the files
#1. go to the folder, and add "*" and "!.gitignore" to a new file '.gitignore'
$ echo -e '*\n!.gitignore' > test 
